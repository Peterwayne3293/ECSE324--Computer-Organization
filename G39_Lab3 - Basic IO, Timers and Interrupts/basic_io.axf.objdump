
C:/Users/ifaruk/Downloads/ECSE 324/G39_Lab3/basic_io.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 fc 07 00 00 00 08 00 00 04 08 00 00     @...............
  30:	08 08 00 00 f8 07 00 00 0c 08 00 00 10 08 00 00     ................

Disassembly of section .text:

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb0001ae 	bl	794 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	000008f8 	.word	0x000008f8

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000d30 	.word	0x00000d30

00000124 <__cs3_heap_start_ptr>:
 124:	00000d58 	.word	0x00000d58

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000d38 	.word	0x00000d38
 170:	00000d3b 	.word	0x00000d3b
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000d38 	.word	0x00000d38
 1bc:	00000d38 	.word	0x00000d38
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000d38 	.word	0x00000d38
 200:	00000000 	.word	0x00000000
 204:	0000089c 	.word	0x0000089c

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	0000089c 	.word	0x0000089c
 250:	00000d3c 	.word	0x00000d3c
 254:	000008f8 	.word	0x000008f8
 258:	00000000 	.word	0x00000000

0000025c <main>:
#include "./drivers/inc/slider_switches.h"
#include "./drivers/inc/HEX_displays.h"
#include "./drivers/inc/pushbuttons.h"

int main()
{
 25c:	e92d4800 	push	{r11, lr}
 260:	e28db004 	add	r11, sp, #4
 264:	e24dd008 	sub	sp, sp, #8
 268:	ea000000 	b	270 <main+0x14>
		// Clear all the HEX displays if SW9 is set
        if (sw_input == 0x200) {
            HEX_clear_ASM(HEX0 | HEX1 | HEX2 | HEX3 | HEX4 | HEX5);
            continue;
        }
    }
 26c:	e1a00000 	nop			; (mov r0, r0)
	int sw_data;

    while (1)
    {
		// Read Slide Switch
		sw_input = read_slider_switches_ASM();
 270:	eb00005c 	bl	3e8 <read_slider_switches_ASM>
 274:	e50b0008 	str	r0, [r11, #-8]
	
        // Turn on LEDs per flipped switch
        write_LEDs_ASM(sw_input);
 278:	e51b0008 	ldr	r0, [r11, #-8]
 27c:	eb000055 	bl	3d8 <write_LEDs_ASM>

        // The least-significant 4 bits is the HEX value to display
        sw_data = sw_input & 0x0F;
 280:	e51b3008 	ldr	r3, [r11, #-8]
 284:	e203300f 	and	r3, r3, #15
 288:	e50b300c 	str	r3, [r11, #-12]

        // Switch on HEX displays for each corresponding button that is pressed
        HEX_write_ASM(read_PB_data_ASM(), sw_data);
 28c:	eb000059 	bl	3f8 <read_PB_data_ASM>
 290:	e1a03000 	mov	r3, r0
 294:	e6ef2073 	uxtb	r2, r3
 298:	e51b300c 	ldr	r3, [r11, #-12]
 29c:	e6ef3073 	uxtb	r3, r3
 2a0:	e1a00002 	mov	r0, r2
 2a4:	e1a01003 	mov	r1, r3
 2a8:	eb000018 	bl	310 <HEX_write_ASM>

        // HEX4 and HEX5 are flooded by default
        HEX_flood_ASM(HEX4 | HEX5);
 2ac:	e3a00030 	mov	r0, #48	; 0x30
 2b0:	eb000011 	bl	2fc <HEX_flood_ASM>

		// Clear all the HEX displays if SW9 is set
        if (sw_input == 0x200) {
 2b4:	e51b3008 	ldr	r3, [r11, #-8]
 2b8:	e3530c02 	cmp	r3, #512	; 0x200
 2bc:	1affffea 	bne	26c <main+0x10>
            HEX_clear_ASM(HEX0 | HEX1 | HEX2 | HEX3 | HEX4 | HEX5);
 2c0:	e3a0003f 	mov	r0, #63	; 0x3f
 2c4:	eb000007 	bl	2e8 <HEX_clear_ASM>
            continue;
 2c8:	e1a00000 	nop			; (mov r0, r0)
        }
    }
 2cc:	eaffffe6 	b	26c <main+0x10>
            .equ HEX0_3_BASE, 0xFF200020
            .equ HEX4_5_BASE, 0xFF200030
            .global HEX_clear_ASM
            .global HEX_flood_ASM
            .global HEX_write_ASM
			MOV R4, #1	//bit identifier
 2d0:	e3a04001 	mov	r4, #1
			MOV R2, #6	//loop counter
 2d4:	e3a02006 	mov	r2, #6
			LDR R6, = HEX0_3_BASE
 2d8:	e59f60e0 	ldr	r6, [pc, #224]	; 3c0 <Value+0x10>
			LDR R7, [R6]
 2dc:	e5967000 	ldr	r7, [r6]
			LDR R8, = HEX4_5_BASE
 2e0:	e59f80dc 	ldr	r8, [pc, #220]	; 3c4 <Value+0x14>
			LDR R9, [R8]
 2e4:	e5989000 	ldr	r9, [r8]

000002e8 <HEX_clear_ASM>:

HEX_clear_ASM:
			MOV		R3, #0x00
 2e8:	e3a03000 	mov	r3, #0
			PUSH	{R2, R4, LR}
 2ec:	e92d4014 	push	{r2, r4, lr}
			BL		Flag
 2f0:	eb00000c 	bl	328 <Flag>
			POP		{R2, R4, LR}
 2f4:	e8bd4014 	pop	{r2, r4, lr}
            BX      LR                  
 2f8:	e12fff1e 	bx	lr

000002fc <HEX_flood_ASM>:

HEX_flood_ASM:
            MOV     R3, #0x7F
 2fc:	e3a0307f 	mov	r3, #127	; 0x7f
			PUSH	{R2, R4, LR}
 300:	e92d4014 	push	{r2, r4, lr}
			BL		Flag
 304:	eb000007 	bl	328 <Flag>
			POP		{R2, R4, LR}
 308:	e8bd4014 	pop	{r2, r4, lr}
            BX      LR     
 30c:	e12fff1e 	bx	lr

00000310 <HEX_write_ASM>:
            
HEX_write_ASM:
            LDR     R5, =Value
 310:	e59f50b0 	ldr	r5, [pc, #176]	; 3c8 <Value+0x18>
			LDRB    R3, [R5, R1]       
 314:	e7d53001 	ldrb	r3, [r5, r1]
			PUSH	{R2, R4, LR}    
 318:	e92d4014 	push	{r2, r4, lr}
            BL      Flag	          
 31c:	eb000001 	bl	328 <Flag>
            POP		{R2, R4, LR}
 320:	e8bd4014 	pop	{r2, r4, lr}
            BX      LR                 			
 324:	e12fff1e 	bx	lr

00000328 <Flag>:

Flag:		PUSH	{LR}
 328:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
			TST 	R0, R4
 32c:	e1100004 	tst	r0, r4
			BLNE 	Identify
 330:	1b000005 	blne	34c <Identify>
			LSL 	R4, R1, #1
 334:	e1a04081 	lsl	r4, r1, #1
			SUBS	R2, R2, #1
 338:	e2522001 	subs	r2, r2, #1
			BEQ		Done
 33c:	0a000000 	beq	344 <Done>
			B		Flag
 340:	eafffff8 	b	328 <Flag>

00000344 <Done>:

Done:		POP		{LR}
 344:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
			BX		LR			
 348:	e12fff1e 	bx	lr

0000034c <Identify>:

Identify:	CMP		R2, #6
 34c:	e3520006 	cmp	r2, #6
			BEQ		Hex0
 350:	0a00000a 	beq	380 <Hex0>
			CMP		R2, #5
 354:	e3520005 	cmp	r2, #5
			BEQ		Hex1
 358:	0a00000a 	beq	388 <Hex1>
			CMP		R2, #4
 35c:	e3520004 	cmp	r2, #4
			BEQ		Hex2
 360:	0a00000a 	beq	390 <Hex2>
			CMP		R2, #3
 364:	e3520003 	cmp	r2, #3
			BEQ		Hex3
 368:	0a00000a 	beq	398 <Hex3>
			CMP		R2, #2
 36c:	e3520002 	cmp	r2, #2
			BEQ		Hex4
 370:	0a00000a 	beq	3a0 <Hex4>
			CMP		R2, #1
 374:	e3520001 	cmp	r2, #1
			BEQ		Hex5
 378:	0a00000a 	beq	3a8 <Hex5>
			BX		LR
 37c:	e12fff1e 	bx	lr

00000380 <Hex0>:

Hex0:		STRB	R3, [R7]
 380:	e5c73000 	strb	r3, [r7]
			BX		LR
 384:	e12fff1e 	bx	lr

00000388 <Hex1>:

Hex1:		STRB	R3, [R7, #1]
 388:	e5c73001 	strb	r3, [r7, #1]
			BX		LR
 38c:	e12fff1e 	bx	lr

00000390 <Hex2>:

Hex2:		STRB	R3, [R7, #2]
 390:	e5c73002 	strb	r3, [r7, #2]
			BX		LR
 394:	e12fff1e 	bx	lr

00000398 <Hex3>:

Hex3:		STRB	R3, [R7, #3]
 398:	e5c73003 	strb	r3, [r7, #3]
			BX		LR
 39c:	e12fff1e 	bx	lr

000003a0 <Hex4>:

Hex4:		STRB	R3, [R9]
 3a0:	e5c93000 	strb	r3, [r9]
			BX		LR
 3a4:	e12fff1e 	bx	lr

000003a8 <Hex5>:

Hex5:		STRB	R3, [R9, #1]
 3a8:	e5c93001 	strb	r3, [r9, #1]
			BX		LR
 3ac:	e12fff1e 	bx	lr

000003b0 <Value>:
 3b0:	4f5b063f 	.word	0x4f5b063f
 3b4:	077d6d66 	.word	0x077d6d66
 3b8:	7f77677f 	.word	0x7f77677f
 3bc:	71793f39 	.word	0x71793f39
            .global HEX_clear_ASM
            .global HEX_flood_ASM
            .global HEX_write_ASM
			MOV R4, #1	//bit identifier
			MOV R2, #6	//loop counter
			LDR R6, = HEX0_3_BASE
 3c0:	ff200020 	.word	0xff200020
			LDR R7, [R6]
			LDR R8, = HEX4_5_BASE
 3c4:	ff200030 	.word	0xff200030
			BL		Flag
			POP		{R2, R4, LR}
            BX      LR     
            
HEX_write_ASM:
            LDR     R5, =Value
 3c8:	000003b0 	.word	0x000003b0

000003cc <read_LEDs_ASM>:
            .equ LEDR_BASE, 0xFF200000
            .global read_LEDs_ASM
            .global write_LEDs_ASM

read_LEDs_ASM:
            LDR     R1, =LEDR_BASE      // R1 points to LEDR data register
 3cc:	e59f1010 	ldr	r1, [pc, #16]	; 3e4 <write_LEDs_ASM+0xc>
            LDR     R0, [R1]            // R0 holds the value of LEDR data register
 3d0:	e5910000 	ldr	r0, [r1]
            BX      LR
 3d4:	e12fff1e 	bx	lr

000003d8 <write_LEDs_ASM>:

write_LEDs_ASM:
            LDR     R1, =LEDR_BASE      // R1 points to LEDR data register
 3d8:	e59f1004 	ldr	r1, [pc, #4]	; 3e4 <write_LEDs_ASM+0xc>
            STR     R0, [R1]            // set the value of LEDR data register to R0
 3dc:	e5810000 	str	r0, [r1]
            BX      LR
 3e0:	e12fff1e 	bx	lr
            .equ LEDR_BASE, 0xFF200000
            .global read_LEDs_ASM
            .global write_LEDs_ASM

read_LEDs_ASM:
            LDR     R1, =LEDR_BASE      // R1 points to LEDR data register
 3e4:	ff200000 	.word	0xff200000

000003e8 <read_slider_switches_ASM>:
            .text
            .equ SW_BASE, 0xFF200040
            .global read_slider_switches_ASM

read_slider_switches_ASM:
            LDR     R1, =SW_BASE        // R1 points to SW data register
 3e8:	e59f1004 	ldr	r1, [pc, #4]	; 3f4 <read_slider_switches_ASM+0xc>
            LDR     R0, [R1]            // R0 holds the value of SW data register
 3ec:	e5910000 	ldr	r0, [r1]
            BX      LR
 3f0:	e12fff1e 	bx	lr
            .text
            .equ SW_BASE, 0xFF200040
            .global read_slider_switches_ASM

read_slider_switches_ASM:
            LDR     R1, =SW_BASE        // R1 points to SW data register
 3f4:	ff200040 	.word	0xff200040

000003f8 <read_PB_data_ASM>:
            .global PB_clear_edgecap_ASM
            .global enable_PB_INT_ASM
            .global disable_PB_INT_ASM

read_PB_data_ASM:
            LDR     R1, =KEY_BASE       // R1 points to KEY data register
 3f8:	e59f1064 	ldr	r1, [pc, #100]	; 464 <disable_PB_INT_ASM+0x14>
            LDR     R0, [R1]            // R0 holds the value of KEY data register
 3fc:	e5910000 	ldr	r0, [r1]
            BX      LR
 400:	e12fff1e 	bx	lr

00000404 <read_PB_data_is_pressed_ASM>:

read_PB_data_is_pressed_ASM:
            LDR     R2, =KEY_BASE       // R2 points to KEY data register
 404:	e59f2058 	ldr	r2, [pc, #88]	; 464 <disable_PB_INT_ASM+0x14>
            LDR     R1, [R2]            // R1 holds the value of KEY data register
 408:	e5921000 	ldr	r1, [r2]
            AND     R0, R1, R0          // perform bitwise-and on R1 and PB mask to get only the
 40c:	e0010000 	and	r0, r1, r0
                                        // bits we care about
            BX      LR
 410:	e12fff1e 	bx	lr

00000414 <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM:
            LDR     R1, =KEY_BASE       // R1 points to KEY data register
 414:	e59f1048 	ldr	r1, [pc, #72]	; 464 <disable_PB_INT_ASM+0x14>
            LDR     R0, [R1, #12]       // R0 holds the value of KEY edgecapture register
 418:	e591000c 	ldr	r0, [r1, #12]
            BX      LR
 41c:	e12fff1e 	bx	lr

00000420 <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM:
            LDR     R2, =KEY_BASE       // R2 points to KEY data register
 420:	e59f203c 	ldr	r2, [pc, #60]	; 464 <disable_PB_INT_ASM+0x14>
            LDR     R1, [R2, #12]       // R1 holds the value of KEY edgecapture register
 424:	e592100c 	ldr	r1, [r2, #12]
            AND     R0, R1, R0          // perform bitwise-and on R1 and PB mask to get only the
 428:	e0010000 	and	r0, r1, r0
                                        // bits we care about
            BX      LR
 42c:	e12fff1e 	bx	lr

00000430 <PB_clear_edgecap_ASM>:

PB_clear_edgecap_ASM:
            LDR     R1, =KEY_BASE       // R1 points to KEY data register
 430:	e59f102c 	ldr	r1, [pc, #44]	; 464 <disable_PB_INT_ASM+0x14>
            STR     R0, [R1, #12]       // place R0 in KEY edgecapture register
 434:	e581000c 	str	r0, [r1, #12]
            BX      LR
 438:	e12fff1e 	bx	lr

0000043c <enable_PB_INT_ASM>:

enable_PB_INT_ASM:
            LDR     R2, =KEY_BASE       // R2 points to KEY data register
 43c:	e59f2020 	ldr	r2, [pc, #32]	; 464 <disable_PB_INT_ASM+0x14>
            LDR     R1, [R2, #8]        // R1 holds the value of KEY interrupt register
 440:	e5921008 	ldr	r1, [r2, #8]
            ORR     R1, R1, R0          // perform bitwise-or on R1 and PB mask to get only the
 444:	e1811000 	orr	r1, r1, r0
                                        // bits we want to enable interrupts for
            STR     R1, [R2, #8]        // place R1 in KEY interrupt register
 448:	e5821008 	str	r1, [r2, #8]
            BX      LR
 44c:	e12fff1e 	bx	lr

00000450 <disable_PB_INT_ASM>:

disable_PB_INT_ASM:
            LDR     R2, =KEY_BASE       // R2 points to KEY data register
 450:	e59f200c 	ldr	r2, [pc, #12]	; 464 <disable_PB_INT_ASM+0x14>
            LDR     R1, [R2, #8]        // R1 holds the value of KEY interrupt register
 454:	e5921008 	ldr	r1, [r2, #8]
            BIC     R1, R1, R0          // perform bit-clear on R1 using PB mask to get only the
 458:	e1c11000 	bic	r1, r1, r0
                                        // bits we want to interrupts to be enabled for
            STR     R1, [R2, #8]        // place R1 in KEY interrupt register
 45c:	e5821008 	str	r1, [r2, #8]
            BX      LR
 460:	e12fff1e 	bx	lr
            .global PB_clear_edgecap_ASM
            .global enable_PB_INT_ASM
            .global disable_PB_INT_ASM

read_PB_data_ASM:
            LDR     R1, =KEY_BASE       // R1 points to KEY data register
 464:	ff200050 	.word	0xff200050

00000468 <atexit>:
 468:	e1a01000 	mov	r1, r0
 46c:	e3a00000 	mov	r0, #0
 470:	e92d4008 	push	{r3, lr}
 474:	e1a02000 	mov	r2, r0
 478:	e1a03000 	mov	r3, r0
 47c:	eb00000e 	bl	4bc <__register_exitproc>
 480:	e8bd4008 	pop	{r3, lr}
 484:	e12fff1e 	bx	lr

00000488 <exit>:
 488:	e92d4008 	push	{r3, lr}
 48c:	e3a01000 	mov	r1, #0
 490:	e1a04000 	mov	r4, r0
 494:	eb000045 	bl	5b0 <__call_exitprocs>
 498:	e59f3018 	ldr	r3, [pc, #24]	; 4b8 <exit+0x30>
 49c:	e5930000 	ldr	r0, [r3]
 4a0:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 4a4:	e3530000 	cmp	r3, #0
 4a8:	11a0e00f 	movne	lr, pc
 4ac:	112fff13 	bxne	r3
 4b0:	e1a00004 	mov	r0, r4
 4b4:	eb0000c9 	bl	7e0 <_exit>
 4b8:	000008a0 	.word	0x000008a0

000004bc <__register_exitproc>:
 4bc:	e59fc0e4 	ldr	r12, [pc, #228]	; 5a8 <__register_exitproc+0xec>
 4c0:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 4c4:	e59c4000 	ldr	r4, [r12]
 4c8:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 4cc:	e35c0000 	cmp	r12, #0
 4d0:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 4d4:	e59c5004 	ldr	r5, [r12, #4]
 4d8:	0584c148 	streq	r12, [r4, #328]	; 0x148
 4dc:	e355001f 	cmp	r5, #31
 4e0:	e24dd010 	sub	sp, sp, #16
 4e4:	e1a06000 	mov	r6, r0
 4e8:	da000015 	ble	544 <__register_exitproc+0x88>
 4ec:	e59f00b8 	ldr	r0, [pc, #184]	; 5ac <__register_exitproc+0xf0>
 4f0:	e3500000 	cmp	r0, #0
 4f4:	1a000001 	bne	500 <__register_exitproc+0x44>
 4f8:	e3e00000 	mvn	r0, #0
 4fc:	ea000018 	b	564 <__register_exitproc+0xa8>
 500:	e3a00e19 	mov	r0, #400	; 0x190
 504:	e58d100c 	str	r1, [sp, #12]
 508:	e58d2008 	str	r2, [sp, #8]
 50c:	e58d3004 	str	r3, [sp, #4]
 510:	e320f000 	nop	{0}
 514:	e250c000 	subs	r12, r0, #0
 518:	e59d100c 	ldr	r1, [sp, #12]
 51c:	e59d2008 	ldr	r2, [sp, #8]
 520:	e59d3004 	ldr	r3, [sp, #4]
 524:	0afffff3 	beq	4f8 <__register_exitproc+0x3c>
 528:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 52c:	e3a00000 	mov	r0, #0
 530:	e58c0004 	str	r0, [r12, #4]
 534:	e58c5000 	str	r5, [r12]
 538:	e584c148 	str	r12, [r4, #328]	; 0x148
 53c:	e58c0188 	str	r0, [r12, #392]	; 0x188
 540:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 544:	e3560000 	cmp	r6, #0
 548:	e59c4004 	ldr	r4, [r12, #4]
 54c:	1a000007 	bne	570 <__register_exitproc+0xb4>
 550:	e2843002 	add	r3, r4, #2
 554:	e2844001 	add	r4, r4, #1
 558:	e78c1103 	str	r1, [r12, r3, lsl #2]
 55c:	e58c4004 	str	r4, [r12, #4]
 560:	e3a00000 	mov	r0, #0
 564:	e28dd010 	add	sp, sp, #16
 568:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 56c:	e12fff1e 	bx	lr
 570:	e3a00001 	mov	r0, #1
 574:	e1a00410 	lsl	r0, r0, r4
 578:	e08c8104 	add	r8, r12, r4, lsl #2
 57c:	e3560002 	cmp	r6, #2
 580:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 584:	e5883108 	str	r3, [r8, #264]	; 0x108
 588:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 58c:	e1877000 	orr	r7, r7, r0
 590:	01830000 	orreq	r0, r3, r0
 594:	e1a05008 	mov	r5, r8
 598:	e5882088 	str	r2, [r8, #136]	; 0x88
 59c:	e58c7188 	str	r7, [r12, #392]	; 0x188
 5a0:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 5a4:	eaffffe9 	b	550 <__register_exitproc+0x94>
 5a8:	000008a0 	.word	0x000008a0
 5ac:	00000000 	.word	0x00000000

000005b0 <__call_exitprocs>:
 5b0:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 5b4:	e59f3168 	ldr	r3, [pc, #360]	; 724 <__call_exitprocs+0x174>
 5b8:	e5933000 	ldr	r3, [r3]
 5bc:	e24dd014 	sub	sp, sp, #20
 5c0:	e58d3004 	str	r3, [sp, #4]
 5c4:	e2833f52 	add	r3, r3, #328	; 0x148
 5c8:	e58d0008 	str	r0, [sp, #8]
 5cc:	e58d300c 	str	r3, [sp, #12]
 5d0:	e1a07001 	mov	r7, r1
 5d4:	e3a08001 	mov	r8, #1
 5d8:	e59d3004 	ldr	r3, [sp, #4]
 5dc:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 5e0:	e3560000 	cmp	r6, #0
 5e4:	e59db00c 	ldr	r11, [sp, #12]
 5e8:	0a000033 	beq	6bc <__call_exitprocs+0x10c>
 5ec:	e5965004 	ldr	r5, [r6, #4]
 5f0:	e2554001 	subs	r4, r5, #1
 5f4:	5286a088 	addpl	r10, r6, #136	; 0x88
 5f8:	5285501f 	addpl	r5, r5, #31
 5fc:	508a5105 	addpl	r5, r10, r5, lsl #2
 600:	5a000007 	bpl	624 <__call_exitprocs+0x74>
 604:	ea000029 	b	6b0 <__call_exitprocs+0x100>
 608:	e5953000 	ldr	r3, [r5]
 60c:	e1530007 	cmp	r3, r7
 610:	0a000005 	beq	62c <__call_exitprocs+0x7c>
 614:	e2444001 	sub	r4, r4, #1
 618:	e3740001 	cmn	r4, #1
 61c:	e2455004 	sub	r5, r5, #4
 620:	0a000022 	beq	6b0 <__call_exitprocs+0x100>
 624:	e3570000 	cmp	r7, #0
 628:	1afffff6 	bne	608 <__call_exitprocs+0x58>
 62c:	e5963004 	ldr	r3, [r6, #4]
 630:	e06a2005 	rsb	r2, r10, r5
 634:	e2433001 	sub	r3, r3, #1
 638:	e0862002 	add	r2, r6, r2
 63c:	e1530004 	cmp	r3, r4
 640:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 644:	13a01000 	movne	r1, #0
 648:	05864004 	streq	r4, [r6, #4]
 64c:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 650:	e3530000 	cmp	r3, #0
 654:	0affffee 	beq	614 <__call_exitprocs+0x64>
 658:	e1a02418 	lsl	r2, r8, r4
 65c:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 660:	e1120001 	tst	r2, r1
 664:	e5969004 	ldr	r9, [r6, #4]
 668:	0a000016 	beq	6c8 <__call_exitprocs+0x118>
 66c:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 670:	e1120001 	tst	r2, r1
 674:	1a000016 	bne	6d4 <__call_exitprocs+0x124>
 678:	e59d0008 	ldr	r0, [sp, #8]
 67c:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 680:	e1a0e00f 	mov	lr, pc
 684:	e12fff13 	bx	r3
 688:	e5963004 	ldr	r3, [r6, #4]
 68c:	e1530009 	cmp	r3, r9
 690:	1affffd0 	bne	5d8 <__call_exitprocs+0x28>
 694:	e59b3000 	ldr	r3, [r11]
 698:	e1530006 	cmp	r3, r6
 69c:	1affffcd 	bne	5d8 <__call_exitprocs+0x28>
 6a0:	e2444001 	sub	r4, r4, #1
 6a4:	e3740001 	cmn	r4, #1
 6a8:	e2455004 	sub	r5, r5, #4
 6ac:	1affffdc 	bne	624 <__call_exitprocs+0x74>
 6b0:	e59f1070 	ldr	r1, [pc, #112]	; 728 <__call_exitprocs+0x178>
 6b4:	e3510000 	cmp	r1, #0
 6b8:	1a000009 	bne	6e4 <__call_exitprocs+0x134>
 6bc:	e28dd014 	add	sp, sp, #20
 6c0:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 6c4:	e12fff1e 	bx	lr
 6c8:	e1a0e00f 	mov	lr, pc
 6cc:	e12fff13 	bx	r3
 6d0:	eaffffec 	b	688 <__call_exitprocs+0xd8>
 6d4:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 6d8:	e1a0e00f 	mov	lr, pc
 6dc:	e12fff13 	bx	r3
 6e0:	eaffffe8 	b	688 <__call_exitprocs+0xd8>
 6e4:	e5963004 	ldr	r3, [r6, #4]
 6e8:	e3530000 	cmp	r3, #0
 6ec:	e5963000 	ldr	r3, [r6]
 6f0:	1a000008 	bne	718 <__call_exitprocs+0x168>
 6f4:	e3530000 	cmp	r3, #0
 6f8:	0a000006 	beq	718 <__call_exitprocs+0x168>
 6fc:	e1a00006 	mov	r0, r6
 700:	e58b3000 	str	r3, [r11]
 704:	e320f000 	nop	{0}
 708:	e59b6000 	ldr	r6, [r11]
 70c:	e3560000 	cmp	r6, #0
 710:	1affffb5 	bne	5ec <__call_exitprocs+0x3c>
 714:	eaffffe8 	b	6bc <__call_exitprocs+0x10c>
 718:	e1a0b006 	mov	r11, r6
 71c:	e1a06003 	mov	r6, r3
 720:	eafffff9 	b	70c <__call_exitprocs+0x15c>
 724:	000008a0 	.word	0x000008a0
 728:	00000000 	.word	0x00000000

0000072c <register_fini>:
 72c:	e92d4008 	push	{r3, lr}
 730:	e59f3010 	ldr	r3, [pc, #16]	; 748 <register_fini+0x1c>
 734:	e3530000 	cmp	r3, #0
 738:	159f000c 	ldrne	r0, [pc, #12]	; 74c <register_fini+0x20>
 73c:	1bffff49 	blne	468 <atexit>
 740:	e8bd4008 	pop	{r3, lr}
 744:	e12fff1e 	bx	lr
 748:	000008c8 	.word	0x000008c8
 74c:	00000750 	.word	0x00000750

00000750 <__libc_fini_array>:
 750:	e92d4038 	push	{r3, r4, r5, lr}
 754:	e59f5030 	ldr	r5, [pc, #48]	; 78c <__libc_fini_array+0x3c>
 758:	e59f4030 	ldr	r4, [pc, #48]	; 790 <__libc_fini_array+0x40>
 75c:	e0654004 	rsb	r4, r5, r4
 760:	e1b04144 	asrs	r4, r4, #2
 764:	10855104 	addne	r5, r5, r4, lsl #2
 768:	0a000004 	beq	780 <__libc_fini_array+0x30>
 76c:	e5353004 	ldr	r3, [r5, #-4]!
 770:	e1a0e00f 	mov	lr, pc
 774:	e12fff13 	bx	r3
 778:	e2544001 	subs	r4, r4, #1
 77c:	1afffffa 	bne	76c <__libc_fini_array+0x1c>
 780:	eb000050 	bl	8c8 <__libc_fini>
 784:	e8bd4038 	pop	{r3, r4, r5, lr}
 788:	e12fff1e 	bx	lr
 78c:	000008e0 	.word	0x000008e0
 790:	000008e4 	.word	0x000008e4

00000794 <__cs3_premain>:
 794:	e92d4008 	push	{r3, lr}
 798:	eb00001d 	bl	814 <__libc_init_array>
 79c:	e59f3030 	ldr	r3, [pc, #48]	; 7d4 <__cs3_premain+0x40>
 7a0:	e3530000 	cmp	r3, #0
 7a4:	15930000 	ldrne	r0, [r3]
 7a8:	01a00003 	moveq	r0, r3
 7ac:	e59f3024 	ldr	r3, [pc, #36]	; 7d8 <__cs3_premain+0x44>
 7b0:	e3530000 	cmp	r3, #0
 7b4:	15931000 	ldrne	r1, [r3]
 7b8:	01a01003 	moveq	r1, r3
 7bc:	e3a02000 	mov	r2, #0
 7c0:	ebfffea5 	bl	25c <main>
 7c4:	e59f3010 	ldr	r3, [pc, #16]	; 7dc <__cs3_premain+0x48>
 7c8:	e3530000 	cmp	r3, #0
 7cc:	1bffff2d 	blne	488 <exit>
 7d0:	eafffffe 	b	7d0 <__cs3_premain+0x3c>
	...
 7dc:	00000488 	.word	0x00000488

000007e0 <_exit>:
 7e0:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 7e4:	e3a00018 	mov	r0, #24
 7e8:	e59f1004 	ldr	r1, [pc, #4]	; 7f4 <_exit+0x14>
 7ec:	ef123456 	svc	0x00123456
 7f0:	eafffffe 	b	7f0 <_exit+0x10>
 7f4:	00020026 	.word	0x00020026

000007f8 <__cs3_isr_interrupt>:
 7f8:	eafffffe 	b	7f8 <__cs3_isr_interrupt>

000007fc <__cs3_isr_undef>:
 7fc:	eafffffe 	b	7fc <__cs3_isr_undef>

00000800 <__cs3_isr_swi>:
 800:	eafffffe 	b	800 <__cs3_isr_swi>

00000804 <__cs3_isr_pabort>:
 804:	eafffffe 	b	804 <__cs3_isr_pabort>

00000808 <__cs3_isr_dabort>:
 808:	eafffffe 	b	808 <__cs3_isr_dabort>

0000080c <__cs3_isr_irq>:
 80c:	eafffffe 	b	80c <__cs3_isr_irq>

00000810 <__cs3_isr_fiq>:
 810:	eafffffe 	b	810 <__cs3_isr_fiq>

00000814 <__libc_init_array>:
 814:	e92d4070 	push	{r4, r5, r6, lr}
 818:	e59f506c 	ldr	r5, [pc, #108]	; 88c <__libc_init_array+0x78>
 81c:	e59f606c 	ldr	r6, [pc, #108]	; 890 <__libc_init_array+0x7c>
 820:	e0656006 	rsb	r6, r5, r6
 824:	e1b06146 	asrs	r6, r6, #2
 828:	12455004 	subne	r5, r5, #4
 82c:	13a04000 	movne	r4, #0
 830:	0a000005 	beq	84c <__libc_init_array+0x38>
 834:	e5b53004 	ldr	r3, [r5, #4]!
 838:	e2844001 	add	r4, r4, #1
 83c:	e1a0e00f 	mov	lr, pc
 840:	e12fff13 	bx	r3
 844:	e1560004 	cmp	r6, r4
 848:	1afffff9 	bne	834 <__libc_init_array+0x20>
 84c:	e59f5040 	ldr	r5, [pc, #64]	; 894 <__libc_init_array+0x80>
 850:	e59f6040 	ldr	r6, [pc, #64]	; 898 <__libc_init_array+0x84>
 854:	e0656006 	rsb	r6, r5, r6
 858:	eb000012 	bl	8a8 <_init>
 85c:	e1b06146 	asrs	r6, r6, #2
 860:	12455004 	subne	r5, r5, #4
 864:	13a04000 	movne	r4, #0
 868:	0a000005 	beq	884 <__libc_init_array+0x70>
 86c:	e5b53004 	ldr	r3, [r5, #4]!
 870:	e2844001 	add	r4, r4, #1
 874:	e1a0e00f 	mov	lr, pc
 878:	e12fff13 	bx	r3
 87c:	e1560004 	cmp	r6, r4
 880:	1afffff9 	bne	86c <__libc_init_array+0x58>
 884:	e8bd4070 	pop	{r4, r5, r6, lr}
 888:	e12fff1e 	bx	lr
 88c:	000008c0 	.word	0x000008c0
 890:	000008c0 	.word	0x000008c0
 894:	000008c0 	.word	0x000008c0
 898:	000008c8 	.word	0x000008c8

Disassembly of section .rodata:

000008a0 <_global_impure_ptr>:
 8a0:	00000908 00000043                       ....C...

000008a8 <_init>:
 8a8:	e1a0c00d 	mov	r12, sp
 8ac:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 8b0:	e24cb004 	sub	r11, r12, #4
 8b4:	e24bd028 	sub	sp, r11, #40	; 0x28
 8b8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 8bc:	e12fff1e 	bx	lr

000008c0 <__init_array_start>:
 8c0:	0000072c 	.word	0x0000072c

000008c4 <__frame_dummy_init_array_entry>:
 8c4:	00000208                                ....

000008c8 <__libc_fini>:
 8c8:	e1a0c00d 	mov	r12, sp
 8cc:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 8d0:	e24cb004 	sub	r11, r12, #4
 8d4:	e24bd028 	sub	sp, r11, #40	; 0x28
 8d8:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 8dc:	e12fff1e 	bx	lr

000008e0 <__fini_array_start>:
 8e0:	000001c4 	.word	0x000001c4

000008e4 <__cs3_regions>:
 8e4:	00000000 	.word	0x00000000
 8e8:	00000040 	.word	0x00000040
 8ec:	00000040 	.word	0x00000040
 8f0:	00000cf8 	.word	0x00000cf8
 8f4:	00000020 	.word	0x00000020
