
C:/Users/ifaruk/Downloads/ECSE 324/G39_Lab1/stddev.axf:     file format elf32-littlearm


Disassembly of section .text:

00000000 <__cs3_interrupt_vector>:
			.text
			.global _start

_start:
			LDR R4, =RESULT		// R4 points to the result location
   0:	e59f406c 	ldr	r4, [pc, #108]	; 74 <NUMBERS+0x1c>
			LDR R2, [R4, #4]	// R2 holds the number of elements in the list
   4:	e5942004 	ldr	r2, [r4, #4]
			ADD R3, R4, #8		// R3 poins to the first number
   8:	e2843008 	add	r3, r4, #8
			LDR R0, [R3]		// R0 holds the first number in the list, starting min
   c:	e5930000 	ldr	r0, [r3]
			LDR R5, [R3]		// R5 holds the first number in the list, starting max
  10:	e5935000 	ldr	r5, [r3]

00000014 <LOOP>:

LOOP:		SUBS R2, R2, #1		// decrement the loop counter
  14:	e2522001 	subs	r2, r2, #1
			BEQ DONE			// end loop if counter has reached 0
  18:	0a000009 	beq	44 <DONE>
			ADD R3, R3, #4		// R3 points to next number in the list
  1c:	e2833004 	add	r3, r3, #4
			LDR R1, [R3]		// R1 holds the next number in the list
  20:	e5931000 	ldr	r1, [r3]
			CMP R1, R0			// check if R1 is less than the minimum
  24:	e1510000 	cmp	r1, r0
			BLT Min				// branch to Min if R0 is less than R1
  28:	ba000003 	blt	3c <Min>
			CMP R5, R1			// check if it is greater than the maximum
  2c:	e1550001 	cmp	r5, r1
			BGE LOOP			// if no, branch back to the loop
  30:	aafffff7 	bge	14 <LOOP>
			MOV R5, R1			// if yes, update the curent max
  34:	e1a05001 	mov	r5, r1
			B LOOP				// branch back to the loop
  38:	eafffff5 	b	14 <LOOP>

0000003c <Min>:

Min:		MOV R0, R1			// if yes, update minimum value
  3c:	e1a00001 	mov	r0, r1
			B LOOP				// branch to Loop
  40:	eafffff3 	b	14 <LOOP>

00000044 <DONE>:

DONE:		SUBS R6, R5, R0		// substraction, max - min
  44:	e0556000 	subs	r6, r5, r0
			LSR R4, R6, #2 		// divide by 4
  48:	e1a04126 	lsr	r4, r6, #2

0000004c <END>:

END:		B END				// infinite loop!
  4c:	eafffffe 	b	4c <END>

00000050 <RESULT>:
  50:	00000000 	.word	0x00000000

00000054 <N>:
  54:	00000007 	.word	0x00000007

00000058 <NUMBERS>:
  58:	00000004 	.word	0x00000004
  5c:	00000005 	.word	0x00000005
  60:	00000003 	.word	0x00000003
  64:	00000006 	.word	0x00000006
  68:	00000001 	.word	0x00000001
  6c:	00000008 	.word	0x00000008
  70:	00000002 	.word	0x00000002
  74:	00000050 	.word	0x00000050
