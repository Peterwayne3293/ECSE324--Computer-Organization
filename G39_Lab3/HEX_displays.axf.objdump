
C:/Users/ifaruk/Downloads/ECSE 324/G39_Lab3/HEX_displays.axf:     file format elf32-littlearm


Disassembly of section .vectors:

00000000 <__cs3_interrupt_vector>:
   0:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  10:	18 f0 9f e5 18 f0 9f e5 18 f0 9f e5 18 f0 9f e5     ................
  20:	40 00 00 00 40 0a 00 00 44 0a 00 00 48 0a 00 00     @...@...D...H...
  30:	4c 0a 00 00 3c 0a 00 00 50 0a 00 00 54 0a 00 00     L...<...P...T...

Disassembly of section .text:

00000040 <__cs3_reset>:
  40:	ea000026 	b	e0 <__cs3_start_asm_sim>

00000044 <__cs3_start_c>:
  44:	e59f608c 	ldr	r6, [pc, #140]	; d8 <__cs3_start_c+0x94>
  48:	e3560000 	cmp	r6, #0
  4c:	e92d4080 	push	{r7, lr}
  50:	e2466001 	sub	r6, r6, #1
  54:	0a00001e 	beq	d4 <__cs3_start_c+0x90>
  58:	e59f507c 	ldr	r5, [pc, #124]	; dc <__cs3_start_c+0x98>
  5c:	e3a00000 	mov	r0, #0
  60:	e3a01000 	mov	r1, #0
  64:	e515200c 	ldr	r2, [r5, #-12]
  68:	e515e010 	ldr	lr, [r5, #-16]
  6c:	e5154008 	ldr	r4, [r5, #-8]
  70:	e15e0002 	cmp	lr, r2
  74:	00822004 	addeq	r2, r2, r4
  78:	0a000009 	beq	a4 <__cs3_start_c+0x60>
  7c:	e3540000 	cmp	r4, #0
  80:	0a000007 	beq	a4 <__cs3_start_c+0x60>
  84:	e1a07002 	mov	r7, r2
  88:	e1a0c002 	mov	r12, r2
  8c:	e8be000c 	ldm	lr!, {r2, r3}
  90:	e8ac000c 	stmia	r12!, {r2, r3}
  94:	e067300c 	rsb	r3, r7, r12
  98:	e1540003 	cmp	r4, r3
  9c:	e1a0200c 	mov	r2, r12
  a0:	1afffff9 	bne	8c <__cs3_start_c+0x48>
  a4:	e515e004 	ldr	lr, [r5, #-4]
  a8:	e35e0000 	cmp	lr, #0
  ac:	11a03002 	movne	r3, r2
  b0:	0a000003 	beq	c4 <__cs3_start_c+0x80>
  b4:	e8a30003 	stmia	r3!, {r0, r1}
  b8:	e062c003 	rsb	r12, r2, r3
  bc:	e15e000c 	cmp	lr, r12
  c0:	1afffffb 	bne	b4 <__cs3_start_c+0x70>
  c4:	e2466001 	sub	r6, r6, #1
  c8:	e3760001 	cmn	r6, #1
  cc:	e2855014 	add	r5, r5, #20
  d0:	1affffe3 	bne	64 <__cs3_start_c+0x20>
  d4:	eb00023f 	bl	9d8 <__cs3_premain>
  d8:	00000001 	.word	0x00000001
  dc:	00000b3c 	.word	0x00000b3c

000000e0 <__cs3_start_asm_sim>:
  e0:	e28f103c 	add	r1, pc, #60	; 0x3c
  e4:	e3a00016 	mov	r0, #22
  e8:	ef123456 	svc	0x00123456
  ec:	e3500000 	cmp	r0, #0
  f0:	ba000008 	blt	118 <__cs3_start_asm_sim+0x38>
  f4:	e59f2028 	ldr	r2, [pc, #40]	; 124 <__cs3_heap_start_ptr>
  f8:	e59fd01c 	ldr	sp, [pc, #28]	; 11c <__cs3_start_asm_sim+0x3c>
  fc:	e5920008 	ldr	r0, [r2, #8]
 100:	e3500000 	cmp	r0, #0
 104:	11a0d000 	movne	sp, r0
 108:	e59f1010 	ldr	r1, [pc, #16]	; 120 <__cs3_start_asm_sim+0x40>
 10c:	e5920004 	ldr	r0, [r2, #4]
 110:	e3500000 	cmp	r0, #0
 114:	15810000 	strne	r0, [r1]
 118:	eaffffc9 	b	44 <__cs3_start_c>
 11c:	3ffffff8 	.word	0x3ffffff8
 120:	00000f78 	.word	0x00000f78

00000124 <__cs3_heap_start_ptr>:
 124:	00000fa0 	.word	0x00000fa0

00000128 <_start>:
 128:	e51fd000 	ldr	sp, [pc, #-0]	; 130 <_start+0x8>
 12c:	eaffffc4 	b	44 <__cs3_start_c>
 130:	3ffffff8 	.word	0x3ffffff8

00000134 <deregister_tm_clones>:
 134:	e92d4008 	push	{r3, lr}
 138:	e59f002c 	ldr	r0, [pc, #44]	; 16c <deregister_tm_clones+0x38>
 13c:	e59f302c 	ldr	r3, [pc, #44]	; 170 <deregister_tm_clones+0x3c>
 140:	e0603003 	rsb	r3, r0, r3
 144:	e3530006 	cmp	r3, #6
 148:	8a000001 	bhi	154 <deregister_tm_clones+0x20>
 14c:	e8bd4008 	pop	{r3, lr}
 150:	e12fff1e 	bx	lr
 154:	e59f3018 	ldr	r3, [pc, #24]	; 174 <deregister_tm_clones+0x40>
 158:	e3530000 	cmp	r3, #0
 15c:	0afffffa 	beq	14c <deregister_tm_clones+0x18>
 160:	e1a0e00f 	mov	lr, pc
 164:	e12fff13 	bx	r3
 168:	eafffff7 	b	14c <deregister_tm_clones+0x18>
 16c:	00000f80 	.word	0x00000f80
 170:	00000f83 	.word	0x00000f83
 174:	00000000 	.word	0x00000000

00000178 <register_tm_clones>:
 178:	e92d4008 	push	{r3, lr}
 17c:	e59f0034 	ldr	r0, [pc, #52]	; 1b8 <register_tm_clones+0x40>
 180:	e59f3034 	ldr	r3, [pc, #52]	; 1bc <register_tm_clones+0x44>
 184:	e0603003 	rsb	r3, r0, r3
 188:	e1a03143 	asr	r3, r3, #2
 18c:	e0833fa3 	add	r3, r3, r3, lsr #31
 190:	e1b010c3 	asrs	r1, r3, #1
 194:	1a000001 	bne	1a0 <register_tm_clones+0x28>
 198:	e8bd4008 	pop	{r3, lr}
 19c:	e12fff1e 	bx	lr
 1a0:	e59f2018 	ldr	r2, [pc, #24]	; 1c0 <register_tm_clones+0x48>
 1a4:	e3520000 	cmp	r2, #0
 1a8:	0afffffa 	beq	198 <register_tm_clones+0x20>
 1ac:	e1a0e00f 	mov	lr, pc
 1b0:	e12fff12 	bx	r2
 1b4:	eafffff7 	b	198 <register_tm_clones+0x20>
 1b8:	00000f80 	.word	0x00000f80
 1bc:	00000f80 	.word	0x00000f80
 1c0:	00000000 	.word	0x00000000

000001c4 <__do_global_dtors_aux>:
 1c4:	e92d4010 	push	{r4, lr}
 1c8:	e59f402c 	ldr	r4, [pc, #44]	; 1fc <__do_global_dtors_aux+0x38>
 1cc:	e5d43000 	ldrb	r3, [r4]
 1d0:	e3530000 	cmp	r3, #0
 1d4:	1a000006 	bne	1f4 <__do_global_dtors_aux+0x30>
 1d8:	ebffffd5 	bl	134 <deregister_tm_clones>
 1dc:	e59f301c 	ldr	r3, [pc, #28]	; 200 <__do_global_dtors_aux+0x3c>
 1e0:	e3530000 	cmp	r3, #0
 1e4:	159f0018 	ldrne	r0, [pc, #24]	; 204 <__do_global_dtors_aux+0x40>
 1e8:	1320f000 	nopne	{0}
 1ec:	e3a03001 	mov	r3, #1
 1f0:	e5c43000 	strb	r3, [r4]
 1f4:	e8bd4010 	pop	{r4, lr}
 1f8:	e12fff1e 	bx	lr
 1fc:	00000f80 	.word	0x00000f80
 200:	00000000 	.word	0x00000000
 204:	00000ae0 	.word	0x00000ae0

00000208 <frame_dummy>:
 208:	e92d4008 	push	{r3, lr}
 20c:	e59f3034 	ldr	r3, [pc, #52]	; 248 <frame_dummy+0x40>
 210:	e3530000 	cmp	r3, #0
 214:	159f0030 	ldrne	r0, [pc, #48]	; 24c <frame_dummy+0x44>
 218:	159f1030 	ldrne	r1, [pc, #48]	; 250 <frame_dummy+0x48>
 21c:	1320f000 	nopne	{0}
 220:	e59f002c 	ldr	r0, [pc, #44]	; 254 <frame_dummy+0x4c>
 224:	e5903000 	ldr	r3, [r0]
 228:	e3530000 	cmp	r3, #0
 22c:	0a000003 	beq	240 <frame_dummy+0x38>
 230:	e59f3020 	ldr	r3, [pc, #32]	; 258 <frame_dummy+0x50>
 234:	e3530000 	cmp	r3, #0
 238:	11a0e00f 	movne	lr, pc
 23c:	112fff13 	bxne	r3
 240:	e8bd4008 	pop	{r3, lr}
 244:	eaffffcb 	b	178 <register_tm_clones>
 248:	00000000 	.word	0x00000000
 24c:	00000ae0 	.word	0x00000ae0
 250:	00000f84 	.word	0x00000f84
 254:	00000b40 	.word	0x00000b40
 258:	00000000 	.word	0x00000000

0000025c <HEX_clear_ASM>:
            .global HEX_clear_ASM
            .global HEX_flood_ASM
            .global HEX_write_ASM

HEX_clear_ASM:
			MOV 	R2, #6	//loop counter
 25c:	e3a02006 	mov	r2, #6
			MOV 	R4, #1	//bit identifier
 260:	e3a04001 	mov	r4, #1
			LDR		R6, =HEX0_3_BASE
 264:	e59f60d8 	ldr	r6, [pc, #216]	; 344 <Value+0x10>
			LDR 	R7, =HEX4_5_BASE
 268:	e59f70d8 	ldr	r7, [pc, #216]	; 348 <Value+0x14>
			MOV		R3, #0x00
 26c:	e3a03000 	mov	r3, #0
			PUSH	{LR}        
 270:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
			B		Flag                
 274:	ea00000e 	b	2b4 <Flag>

00000278 <HEX_flood_ASM>:

HEX_flood_ASM:
			MOV 	R2, #6	//loop counter
 278:	e3a02006 	mov	r2, #6
			MOV 	R4, #1	//bit identifier
 27c:	e3a04001 	mov	r4, #1
			LDR		R6, =HEX0_3_BASE
 280:	e59f60bc 	ldr	r6, [pc, #188]	; 344 <Value+0x10>
			LDR 	R7, =HEX4_5_BASE
 284:	e59f70bc 	ldr	r7, [pc, #188]	; 348 <Value+0x14>
			MOV		R3, #0x7F
 288:	e3a0307f 	mov	r3, #127	; 0x7f
			PUSH	{LR}        
 28c:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
			B		Flag
 290:	ea000007 	b	2b4 <Flag>

00000294 <HEX_write_ASM>:
        
HEX_write_ASM:
			MOV 	R2, #6	//loop counter
 294:	e3a02006 	mov	r2, #6
			MOV 	R4, #1	//bit identifier
 298:	e3a04001 	mov	r4, #1
			LDR		R6, =HEX0_3_BASE
 29c:	e59f60a0 	ldr	r6, [pc, #160]	; 344 <Value+0x10>
			LDR 	R7, =HEX4_5_BASE
 2a0:	e59f70a0 	ldr	r7, [pc, #160]	; 348 <Value+0x14>
            LDR     R5, =Value
 2a4:	e59f50a0 	ldr	r5, [pc, #160]	; 34c <Value+0x18>
			LDRB	R3, [R5, R1]       
 2a8:	e7d53001 	ldrb	r3, [r5, r1]
			PUSH	{LR}        
 2ac:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
			B		Flag
 2b0:	eaffffff 	b	2b4 <Flag>

000002b4 <Flag>:
			            			
Flag:		TST 	R0, R4
 2b4:	e1100004 	tst	r0, r4
			BLNE	Identify
 2b8:	1b000005 	blne	2d4 <Identify>
			LSL 	R4, R4, #1
 2bc:	e1a04084 	lsl	r4, r4, #1
			SUBS	R2, R2, #1
 2c0:	e2522001 	subs	r2, r2, #1
			BEQ		Done
 2c4:	0a000000 	beq	2cc <Done>
			B		Flag
 2c8:	eafffff9 	b	2b4 <Flag>

000002cc <Done>:

Done:		POP		{LR}
 2cc:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
			BX		LR			
 2d0:	e12fff1e 	bx	lr

000002d4 <Identify>:

Identify:	CMP		R2, #6
 2d4:	e3520006 	cmp	r2, #6
			BEQ		Hex0
 2d8:	0a000009 	beq	304 <Hex0>
			CMP		R2, #5
 2dc:	e3520005 	cmp	r2, #5
			BEQ		Hex1
 2e0:	0a000009 	beq	30c <Hex1>
			CMP		R2, #4
 2e4:	e3520004 	cmp	r2, #4
			BEQ		Hex2
 2e8:	0a000009 	beq	314 <Hex2>
			CMP		R2, #3
 2ec:	e3520003 	cmp	r2, #3
			BEQ		Hex3
 2f0:	0a000009 	beq	31c <Hex3>
			CMP		R2, #2
 2f4:	e3520002 	cmp	r2, #2
			BEQ		Hex4
 2f8:	0a000009 	beq	324 <Hex4>
			CMP		R2, #1
 2fc:	e3520001 	cmp	r2, #1
			BEQ		Hex5
 300:	0a000009 	beq	32c <Hex5>

00000304 <Hex0>:

Hex0:		STRB	R3, [R6]
 304:	e5c63000 	strb	r3, [r6]
			BX		LR
 308:	e12fff1e 	bx	lr

0000030c <Hex1>:

Hex1:		STRB	R3, [R6, #1]
 30c:	e5c63001 	strb	r3, [r6, #1]
			BX		LR
 310:	e12fff1e 	bx	lr

00000314 <Hex2>:

Hex2:		STRB	R3, [R6, #2]
 314:	e5c63002 	strb	r3, [r6, #2]
			BX		LR
 318:	e12fff1e 	bx	lr

0000031c <Hex3>:

Hex3:		STRB	R3, [R6, #3]
 31c:	e5c63003 	strb	r3, [r6, #3]
			BX		LR
 320:	e12fff1e 	bx	lr

00000324 <Hex4>:

Hex4:		STRB	R3, [R7]
 324:	e5c73000 	strb	r3, [r7]
			BX		LR
 328:	e12fff1e 	bx	lr

0000032c <Hex5>:

Hex5:		STRB	R3, [R7, #1]
 32c:	e5c73001 	strb	r3, [r7, #1]
			BX		LR
 330:	e12fff1e 	bx	lr

00000334 <Value>:
 334:	4f5b063f 	.word	0x4f5b063f
 338:	077d6d66 	.word	0x077d6d66
 33c:	7f77677f 	.word	0x7f77677f
 340:	71793f39 	.word	0x71793f39
            .global HEX_write_ASM

HEX_clear_ASM:
			MOV 	R2, #6	//loop counter
			MOV 	R4, #1	//bit identifier
			LDR		R6, =HEX0_3_BASE
 344:	ff200020 	.word	0xff200020
			LDR 	R7, =HEX4_5_BASE
 348:	ff200030 	.word	0xff200030
HEX_write_ASM:
			MOV 	R2, #6	//loop counter
			MOV 	R4, #1	//bit identifier
			LDR		R6, =HEX0_3_BASE
			LDR 	R7, =HEX4_5_BASE
            LDR     R5, =Value
 34c:	00000334 	.word	0x00000334

00000350 <HPS_TIM_config_ASM>:
	.global HPS_TIM_config_ASM
	.global HPS_TIM_clear_INT_ASM
	.global HPS_TIM_read_INT_ASM

HPS_TIM_config_ASM:
	PUSH {R4-R7, LR}
 350:	e92d40f0 	push	{r4, r5, r6, r7, lr}
	MOV R1, #0
 354:	e3a01000 	mov	r1, #0
	MOV R2, #1
 358:	e3a02001 	mov	r2, #1
	LDR R7, [R0]
 35c:	e5907000 	ldr	r7, [r0]
	B LOOP
 360:	eaffffff 	b	364 <LOOP>

00000364 <LOOP>:

LOOP:
	TST R7, R2, LSL R1
 364:	e1170112 	tst	r7, r2, lsl r1
	BEQ CONTINUE
 368:	0a000000 	beq	370 <CONTINUE>
	BL CONFIG
 36c:	eb000004 	bl	384 <CONFIG>

00000370 <CONTINUE>:

CONTINUE:
	ADD R1, R1, #1
 370:	e2811001 	add	r1, r1, #1
	CMP R1, #4
 374:	e3510004 	cmp	r1, #4
	BLT LOOP
 378:	bafffff9 	blt	364 <LOOP>

0000037c <DONE>:

DONE:
	POP {R4-R7, LR}
 37c:	e8bd40f0 	pop	{r4, r5, r6, r7, lr}
	BX LR
 380:	e12fff1e 	bx	lr

00000384 <CONFIG>:


CONFIG:
	PUSH {LR}
 384:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	
	LDR R3, =HPS_TIM_BASE
 388:	e59f3148 	ldr	r3, [pc, #328]	; 4d8 <HPS_TIM_BASE+0x10>
	LDR R4, [R3, R1, LSL #2]
 38c:	e7934101 	ldr	r4, [r3, r1, lsl #2]
	
	BL DISABLE
 390:	eb000005 	bl	3ac <DISABLE>
	BL SET_LOAD_VAL
 394:	eb000008 	bl	3bc <SET_LOAD_VAL>
	BL SET_LOAD_BIT
 398:	eb00000e 	bl	3d8 <SET_LOAD_BIT>
	BL SET_INT_BIT
 39c:	eb000013 	bl	3f0 <SET_INT_BIT>
	BL SET_EN_BIT
 3a0:	eb000019 	bl	40c <SET_EN_BIT>
	
	POP {LR}
 3a4:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR 
 3a8:	e12fff1e 	bx	lr

000003ac <DISABLE>:

DISABLE:
	LDR R5, [R4, #0x8]
 3ac:	e5945008 	ldr	r5, [r4, #8]
	AND R5, R5, #0xFFFFFFFE
 3b0:	e3c55001 	bic	r5, r5, #1
	STR R5, [R4, #0x8]
 3b4:	e5845008 	str	r5, [r4, #8]
	BX LR
 3b8:	e12fff1e 	bx	lr

000003bc <SET_LOAD_VAL>:
	
SET_LOAD_VAL:
	LDR R5, [R0, #0x4]
 3bc:	e5905004 	ldr	r5, [r0, #4]
	MOV R6, #25
 3c0:	e3a06019 	mov	r6, #25
	MUL R5, R5, R6
 3c4:	e0050695 	mul	r5, r5, r6
	CMP R1, #2
 3c8:	e3510002 	cmp	r1, #2
	LSLLT R5, R5, #2
 3cc:	b1a05105 	lsllt	r5, r5, #2
	STR R5, [R4]
 3d0:	e5845000 	str	r5, [r4]
	BX LR
 3d4:	e12fff1e 	bx	lr

000003d8 <SET_LOAD_BIT>:
	
SET_LOAD_BIT:
	LDR R5, [R4, #0x8]
 3d8:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x8]
 3dc:	e5906008 	ldr	r6, [r0, #8]
	AND R5, R5, #0xFFFFFFFD
 3e0:	e3c55002 	bic	r5, r5, #2
	ORR R5, R5, R6, LSL #1
 3e4:	e1855086 	orr	r5, r5, r6, lsl #1
	STR R5, [R4, #0x8]
 3e8:	e5845008 	str	r5, [r4, #8]
	BX LR
 3ec:	e12fff1e 	bx	lr

000003f0 <SET_INT_BIT>:
	
SET_INT_BIT:
	LDR R5, [R4, #0x8]
 3f0:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0xC]
 3f4:	e590600c 	ldr	r6, [r0, #12]
	EOR R6, R6, #0x00000001
 3f8:	e2266001 	eor	r6, r6, #1
	AND R5, R5, #0xFFFFFFFB
 3fc:	e3c55004 	bic	r5, r5, #4
	ORR R5, R5, R6, LSL #2
 400:	e1855106 	orr	r5, r5, r6, lsl #2
	STR R5, [R4, #0x8]
 404:	e5845008 	str	r5, [r4, #8]
	BX LR
 408:	e12fff1e 	bx	lr

0000040c <SET_EN_BIT>:
	
SET_EN_BIT:
	LDR R5, [R4, #0x8]
 40c:	e5945008 	ldr	r5, [r4, #8]
	LDR R6, [R0, #0x10]
 410:	e5906010 	ldr	r6, [r0, #16]
	AND R5, R5, #0xFFFFFFFE
 414:	e3c55001 	bic	r5, r5, #1
	ORR R5, R5, R6
 418:	e1855006 	orr	r5, r5, r6
	STR R5, [R4, #0x8]
 41c:	e5845008 	str	r5, [r4, #8]
	BX LR
 420:	e12fff1e 	bx	lr

00000424 <HPS_TIM_clear_INT_ASM>:

HPS_TIM_clear_INT_ASM:
	PUSH {LR}
 424:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	MOV R1, #0
 428:	e3a01000 	mov	r1, #0
	MOV R2, #1
 42c:	e3a02001 	mov	r2, #1
	B CLEAR_INT_LOOP
 430:	eaffffff 	b	434 <CLEAR_INT_LOOP>

00000434 <CLEAR_INT_LOOP>:

CLEAR_INT_LOOP:
	TST R0, R2, LSL R1
 434:	e1100112 	tst	r0, r2, lsl r1
	BEQ CLEAR_INT_CONTINUE
 438:	0a000000 	beq	440 <CLEAR_INT_CONTINUE>
	BL CLEAR_INT
 43c:	eb000005 	bl	458 <CLEAR_INT>

00000440 <CLEAR_INT_CONTINUE>:

CLEAR_INT_CONTINUE:
	ADD R1, R1, #1
 440:	e2811001 	add	r1, r1, #1
	CMP R1, #4
 444:	e3510004 	cmp	r1, #4
	BLT CLEAR_INT_LOOP
 448:	bafffff9 	blt	434 <CLEAR_INT_LOOP>
	B CLEAR_INT_DONE
 44c:	eaffffff 	b	450 <CLEAR_INT_DONE>

00000450 <CLEAR_INT_DONE>:

CLEAR_INT_DONE:
	POP {LR}
 450:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
 454:	e12fff1e 	bx	lr

00000458 <CLEAR_INT>:

CLEAR_INT:
	LDR R3, =HPS_TIM_BASE
 458:	e59f3078 	ldr	r3, [pc, #120]	; 4d8 <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
 45c:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0xC]
 460:	e593300c 	ldr	r3, [r3, #12]
	BX LR
 464:	e12fff1e 	bx	lr

00000468 <HPS_TIM_read_INT_ASM>:

HPS_TIM_read_INT_ASM:
	PUSH {LR}
 468:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
	PUSH {R4}
 46c:	e52d4004 	push	{r4}		; (str r4, [sp, #-4]!)
	MOV R1, #0
 470:	e3a01000 	mov	r1, #0
	MOV R2, #1
 474:	e3a02001 	mov	r2, #1
	MOV R4, #0
 478:	e3a04000 	mov	r4, #0
	B READ_INT_LOOP
 47c:	eaffffff 	b	480 <READ_INT_LOOP>

00000480 <READ_INT_LOOP>:

READ_INT_LOOP:
	TST R0, R2, LSL R1
 480:	e1100112 	tst	r0, r2, lsl r1
	BEQ READ_INT_CONTINUE
 484:	0a000000 	beq	48c <READ_INT_CONTINUE>
	BL READ_INT
 488:	eb000008 	bl	4b0 <READ_INT>

0000048c <READ_INT_CONTINUE>:

READ_INT_CONTINUE:
	ADD R1, R1, #1
 48c:	e2811001 	add	r1, r1, #1
	CMP R1, #4
 490:	e3510004 	cmp	r1, #4
	BEQ READ_INT_DONE
 494:	0a000001 	beq	4a0 <READ_INT_DONE>
	LSL R4, R4, #1
 498:	e1a04084 	lsl	r4, r4, #1
	B READ_INT_LOOP
 49c:	eafffff7 	b	480 <READ_INT_LOOP>

000004a0 <READ_INT_DONE>:
	
READ_INT_DONE:
	MOV R0, R4
 4a0:	e1a00004 	mov	r0, r4
	POP {R4}
 4a4:	e49d4004 	pop	{r4}		; (ldr r4, [sp], #4)
	POP {LR}
 4a8:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
 4ac:	e12fff1e 	bx	lr

000004b0 <READ_INT>:

READ_INT:
	LDR R3, =HPS_TIM_BASE
 4b0:	e59f3020 	ldr	r3, [pc, #32]	; 4d8 <HPS_TIM_BASE+0x10>
	LDR R3, [R3, R1, LSL #2]
 4b4:	e7933101 	ldr	r3, [r3, r1, lsl #2]
	LDR R3, [R3, #0x10]
 4b8:	e5933010 	ldr	r3, [r3, #16]
	AND R3, R3, #0x1
 4bc:	e2033001 	and	r3, r3, #1
	EOR R4, R4, R3
 4c0:	e0244003 	eor	r4, r4, r3
	BX LR
 4c4:	e12fff1e 	bx	lr

000004c8 <HPS_TIM_BASE>:
 4c8:	ffc08000 	.word	0xffc08000
 4cc:	ffc09000 	.word	0xffc09000
 4d0:	ffd00000 	.word	0xffd00000
 4d4:	ffd01000 	.word	0xffd01000


CONFIG:
	PUSH {LR}
	
	LDR R3, =HPS_TIM_BASE
 4d8:	000004c8 	.word	0x000004c8

000004dc <hps_tim0_int_flag>:
 4dc:	00000000 	.word	0x00000000

000004e0 <fpga_pb_key0_int_flag>:
 4e0:	00000000 	.word	0x00000000

000004e4 <fpga_pb_key1_int_flag>:
 4e4:	00000000 	.word	0x00000000

000004e8 <fpga_pb_key2_int_flag>:
 4e8:	00000000 	.word	0x00000000

000004ec <fpga_pb_key3_int_flag>:
 4ec:	00000000 	.word	0x00000000

000004f0 <A9_PRIV_TIM_ISR>:

fpga_pb_key3_int_flag:
	.word 0x0

A9_PRIV_TIM_ISR:
	BX LR
 4f0:	e12fff1e 	bx	lr

000004f4 <HPS_GPIO1_ISR>:
	
HPS_GPIO1_ISR:
	BX LR
 4f4:	e12fff1e 	bx	lr

000004f8 <HPS_TIM0_ISR>:
	
HPS_TIM0_ISR:
	PUSH {LR}
 4f8:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)

	MOV R0, #0x1
 4fc:	e3a00001 	mov	r0, #1
	BL HPS_TIM_clear_INT_ASM
 500:	ebffffc7 	bl	424 <HPS_TIM_clear_INT_ASM>
	
	LDR R0, =hps_tim0_int_flag
 504:	e59f0084 	ldr	r0, [pc, #132]	; 590 <FPGA_PS2_DUAL_ISR+0x4>
	MOV R1, #1
 508:	e3a01001 	mov	r1, #1
	STR R1, [R0]
 50c:	e5801000 	str	r1, [r0]
	
	POP {LR}
 510:	e49de004 	pop	{lr}		; (ldr lr, [sp], #4)
	BX LR
 514:	e12fff1e 	bx	lr

00000518 <HPS_TIM1_ISR>:
	
HPS_TIM1_ISR:
	BX LR
 518:	e12fff1e 	bx	lr

0000051c <HPS_TIM2_ISR>:
	
HPS_TIM2_ISR:
	BX LR
 51c:	e12fff1e 	bx	lr

00000520 <HPS_TIM3_ISR>:
	
HPS_TIM3_ISR:
	BX LR
 520:	e12fff1e 	bx	lr

00000524 <FPGA_INTERVAL_TIM_ISR>:
	
FPGA_INTERVAL_TIM_ISR:
	BX LR
 524:	e12fff1e 	bx	lr

00000528 <FPGA_PB_KEYS_ISR>:
	
FPGA_PB_KEYS_ISR:
    PUSH    {R3, LR}                
 528:	e92d4008 	push	{r3, lr}
    BL      read_PB_edgecap_ASM     // call read_PB_edgecap_ASM
 52c:	eb000023 	bl	5c0 <read_PB_edgecap_ASM>
    MOV     R3, R0                  // save return value in R3
 530:	e1a03000 	mov	r3, r0
    BL      PB_clear_edgecap_ASM    // call PB_clear_edgecap_ASM to clear edgecap register
 534:	eb000028 	bl	5dc <PB_clear_edgecap_ASM>
                                   
    MOV     R1, #1                  
 538:	e3a01001 	mov	r1, #1
    TST     R3, #0x00000001         		
 53c:	e3130001 	tst	r3, #1
    LDRNE		R0, =fpga_pb_key0_int_flag 
 540:	159f004c 	ldrne	r0, [pc, #76]	; 594 <FPGA_PS2_DUAL_ISR+0x8>
    STRNE   	R1, [R0]                
 544:	15801000 	strne	r1, [r0]
    TST     R3, #0x00000002   
 548:	e3130002 	tst	r3, #2
    LDRNE   	R0, =fpga_pb_key1_int_flag
 54c:	159f0044 	ldrne	r0, [pc, #68]	; 598 <FPGA_PS2_DUAL_ISR+0xc>
    STRNE   	R1, [R0]
 550:	15801000 	strne	r1, [r0]
    TST     R3, #0x00000004   
 554:	e3130004 	tst	r3, #4
    LDRNE   	R0, =fpga_pb_key2_int_flag
 558:	159f003c 	ldrne	r0, [pc, #60]	; 59c <FPGA_PS2_DUAL_ISR+0x10>
    STRNE   	R1, [R0]
 55c:	15801000 	strne	r1, [r0]
    TST     R3, #0x00000008   
 560:	e3130008 	tst	r3, #8
    LDRNE   	R0, =fpga_pb_key3_int_flag
 564:	159f0034 	ldrne	r0, [pc, #52]	; 5a0 <FPGA_PS2_DUAL_ISR+0x14>
    STRNE   	R1, [R0]
 568:	15801000 	strne	r1, [r0]
    POP     {R3, LR}               
 56c:	e8bd4008 	pop	{r3, lr}
	BX      LR
 570:	e12fff1e 	bx	lr

00000574 <FPGA_Audio_ISR>:
	
FPGA_Audio_ISR:
	BX LR
 574:	e12fff1e 	bx	lr

00000578 <FPGA_PS2_ISR>:
	
FPGA_PS2_ISR:
	BX LR
 578:	e12fff1e 	bx	lr

0000057c <FPGA_JTAG_ISR>:
	
FPGA_JTAG_ISR:
	BX LR
 57c:	e12fff1e 	bx	lr

00000580 <FPGA_IrDA_ISR>:
	
FPGA_IrDA_ISR:
	BX LR
 580:	e12fff1e 	bx	lr

00000584 <FPGA_JP1_ISR>:
	
FPGA_JP1_ISR:
	BX LR
 584:	e12fff1e 	bx	lr

00000588 <FPGA_JP2_ISR>:
	
FPGA_JP2_ISR:
	BX LR
 588:	e12fff1e 	bx	lr

0000058c <FPGA_PS2_DUAL_ISR>:
	
FPGA_PS2_DUAL_ISR:
	BX LR
 58c:	e12fff1e 	bx	lr
	PUSH {LR}

	MOV R0, #0x1
	BL HPS_TIM_clear_INT_ASM
	
	LDR R0, =hps_tim0_int_flag
 590:	000004dc 	.word	0x000004dc
    MOV     R3, R0                  // save return value in R3
    BL      PB_clear_edgecap_ASM    // call PB_clear_edgecap_ASM to clear edgecap register
                                   
    MOV     R1, #1                  
    TST     R3, #0x00000001         		
    LDRNE		R0, =fpga_pb_key0_int_flag 
 594:	000004e0 	.word	0x000004e0
    STRNE   	R1, [R0]                
    TST     R3, #0x00000002   
    LDRNE   	R0, =fpga_pb_key1_int_flag
 598:	000004e4 	.word	0x000004e4
    STRNE   	R1, [R0]
    TST     R3, #0x00000004   
    LDRNE   	R0, =fpga_pb_key2_int_flag
 59c:	000004e8 	.word	0x000004e8
    STRNE   	R1, [R0]
    TST     R3, #0x00000008   
    LDRNE   	R0, =fpga_pb_key3_int_flag
 5a0:	000004ec 	.word	0x000004ec

000005a4 <read_PB_data_ASM>:
            .global PB_clear_edgecap_ASM
            .global enable_PB_INT_ASM
            .global disable_PB_INT_ASM

read_PB_data_ASM:
            LDR     R1, =KEY_BASE       // R1 points to KEY data register
 5a4:	e59f1064 	ldr	r1, [pc, #100]	; 610 <disable_PB_INT_ASM+0x14>
            LDR     R0, [R1]            // R0 holds the value of KEY data register
 5a8:	e5910000 	ldr	r0, [r1]
            BX      LR
 5ac:	e12fff1e 	bx	lr

000005b0 <read_PB_data_is_pressed_ASM>:

read_PB_data_is_pressed_ASM:
            LDR     R2, =KEY_BASE       // R2 points to KEY data register
 5b0:	e59f2058 	ldr	r2, [pc, #88]	; 610 <disable_PB_INT_ASM+0x14>
            LDR     R1, [R2]            // R1 holds the value of KEY data register
 5b4:	e5921000 	ldr	r1, [r2]
            AND     R0, R0, R1          // perform bitwise-and on R1 and PB mask 
 5b8:	e0000001 	and	r0, r0, r1
            BX      LR
 5bc:	e12fff1e 	bx	lr

000005c0 <read_PB_edgecap_ASM>:

read_PB_edgecap_ASM:
            LDR     R1, =KEY_BASE       // R1 points to KEY data register
 5c0:	e59f1048 	ldr	r1, [pc, #72]	; 610 <disable_PB_INT_ASM+0x14>
            LDR     R0, [R1, #12]       // R0 holds the value of KEY edgecapture register
 5c4:	e591000c 	ldr	r0, [r1, #12]
            BX      LR
 5c8:	e12fff1e 	bx	lr

000005cc <PB_edgecap_is_pressed_ASM>:

PB_edgecap_is_pressed_ASM:
            LDR     R2, =KEY_BASE       // R2 points to KEY data register
 5cc:	e59f203c 	ldr	r2, [pc, #60]	; 610 <disable_PB_INT_ASM+0x14>
            LDR     R1, [R2, #12]       // R1 holds the value of KEY edgecapture register
 5d0:	e592100c 	ldr	r1, [r2, #12]
            AND     R0, R0, R1          // perform bitwise-and on R1 and PB mask
 5d4:	e0000001 	and	r0, r0, r1
            BX      LR
 5d8:	e12fff1e 	bx	lr

000005dc <PB_clear_edgecap_ASM>:

PB_clear_edgecap_ASM:
            LDR     R1, =KEY_BASE       // R1 points to KEY data register
 5dc:	e59f102c 	ldr	r1, [pc, #44]	; 610 <disable_PB_INT_ASM+0x14>
            STR     R0, [R1, #12]       // place R0 in KEY edgecapture register
 5e0:	e581000c 	str	r0, [r1, #12]
            BX      LR
 5e4:	e12fff1e 	bx	lr

000005e8 <enable_PB_INT_ASM>:

enable_PB_INT_ASM:
            LDR     R2, =KEY_BASE       // R2 points to KEY data register
 5e8:	e59f2020 	ldr	r2, [pc, #32]	; 610 <disable_PB_INT_ASM+0x14>
            LDR     R1, [R2, #8]        // R1 holds the value of KEY interrupt register
 5ec:	e5921008 	ldr	r1, [r2, #8]
            ORR     R1, R1, R0          // perform bitwise-or on R1 and PB mask
 5f0:	e1811000 	orr	r1, r1, r0
            STR     R1, [R2, #8]        // place R1 in KEY interrupt register
 5f4:	e5821008 	str	r1, [r2, #8]
            BX      LR
 5f8:	e12fff1e 	bx	lr

000005fc <disable_PB_INT_ASM>:

disable_PB_INT_ASM:
            LDR     R2, =KEY_BASE       // R2 points to KEY data register
 5fc:	e59f200c 	ldr	r2, [pc, #12]	; 610 <disable_PB_INT_ASM+0x14>
            LDR     R1, [R2, #8]        // R1 holds the value of KEY interrupt register
 600:	e5921008 	ldr	r1, [r2, #8]
            BIC     R1, R1, R0          // perform bit-clear on R1 using PB mask
 604:	e1c11000 	bic	r1, r1, r0
            STR     R1, [R2, #8]        // place R1 in KEY interrupt register
 608:	e5821008 	str	r1, [r2, #8]
            BX      LR
 60c:	e12fff1e 	bx	lr
            .global PB_clear_edgecap_ASM
            .global enable_PB_INT_ASM
            .global disable_PB_INT_ASM

read_PB_data_ASM:
            LDR     R1, =KEY_BASE       // R1 points to KEY data register
 610:	ff200050 	.word	0xff200050

00000614 <read_LEDs_ASM>:
            .equ LEDR_BASE, 0xFF200000
            .global read_LEDs_ASM
            .global write_LEDs_ASM

read_LEDs_ASM:
            LDR     R1, =LEDR_BASE      // R1 points to LEDR data register
 614:	e59f1010 	ldr	r1, [pc, #16]	; 62c <write_LEDs_ASM+0xc>
            LDR     R0, [R1]            // R0 holds the value of LEDR data register
 618:	e5910000 	ldr	r0, [r1]
            BX      LR
 61c:	e12fff1e 	bx	lr

00000620 <write_LEDs_ASM>:

write_LEDs_ASM:
            LDR     R1, =LEDR_BASE      // R1 points to LEDR data register
 620:	e59f1004 	ldr	r1, [pc, #4]	; 62c <write_LEDs_ASM+0xc>
            STR     R0, [R1]            // set the value of LEDR data register to R0
 624:	e5810000 	str	r0, [r1]
            BX      LR
 628:	e12fff1e 	bx	lr
            .equ LEDR_BASE, 0xFF200000
            .global read_LEDs_ASM
            .global write_LEDs_ASM

read_LEDs_ASM:
            LDR     R1, =LEDR_BASE      // R1 points to LEDR data register
 62c:	ff200000 	.word	0xff200000

00000630 <read_slider_switches_ASM>:
            .text
            .equ SW_BASE, 0xFF200040
            .global read_slider_switches_ASM

read_slider_switches_ASM:
            LDR     R1, =SW_BASE        // R1 points to SW data register
 630:	e59f1004 	ldr	r1, [pc, #4]	; 63c <read_slider_switches_ASM+0xc>
            LDR     R0, [R1]            // R0 holds the value of SW data register
 634:	e5910000 	ldr	r0, [r1]
            BX      LR
 638:	e12fff1e 	bx	lr
            .text
            .equ SW_BASE, 0xFF200040
            .global read_slider_switches_ASM

read_slider_switches_ASM:
            LDR     R1, =SW_BASE        // R1 points to SW data register
 63c:	ff200040 	.word	0xff200040

00000640 <main>:
#include "./drivers/inc/LEDs.h"
#include "./drivers/inc/slider_switches.h"
#include "./drivers/inc/HEX_displays.h"
#include "./drivers/inc/pushbuttons.h"

int main(){
 640:	e92d4800 	push	{r11, lr}
 644:	e28db004 	add	r11, sp, #4
 648:	e24dd010 	sub	sp, sp, #16
	int sw_data;
	int pb_data;

	while (1){
		// Read Slide Switch
		sw_input = read_slider_switches_ASM();
 64c:	ebfffff7 	bl	630 <read_slider_switches_ASM>
 650:	e50b0008 	str	r0, [r11, #-8]

		// Turn on LEDs per flipped switch
        //write_LEDs_ASM(sw_input);

		// Read Push Button
		pb_data = read_PB_data_ASM();
 654:	ebffffd2 	bl	5a4 <read_PB_data_ASM>
 658:	e50b000c 	str	r0, [r11, #-12]
		
		//Clear Display if SW9 is flipped
		if ((sw_input & 0x200) == 0x200){
 65c:	e51b3008 	ldr	r3, [r11, #-8]
 660:	e2033c02 	and	r3, r3, #512	; 0x200
 664:	e3530000 	cmp	r3, #0
 668:	0a000002 	beq	678 <main+0x38>
			HEX_clear_ASM(HEX0 | HEX1 | HEX2 | HEX3 | HEX4 | HEX5);
 66c:	e3a0003f 	mov	r0, #63	; 0x3f
 670:	ebfffef9 	bl	25c <HEX_clear_ASM>
		//HEX_clear_ASM(HEX0 | HEX1);
		
		//continue;
		    
		//else {HEX_flood_ASM(HEX1);}
	}
 674:	eafffff4 	b	64c <main+0xc>
			HEX_clear_ASM(HEX0 | HEX1 | HEX2 | HEX3 | HEX4 | HEX5);
		}
		else {
		
		//The last 4 switch selection operation
        sw_data = sw_input & 0x0F;
 678:	e51b3008 	ldr	r3, [r11, #-8]
 67c:	e203300f 	and	r3, r3, #15
 680:	e50b3010 	str	r3, [r11, #-16]
		
        //Switch on HEX displays for each corresponding button that is pressed
		HEX_write_ASM(pb_data, sw_data);
 684:	e51b300c 	ldr	r3, [r11, #-12]
 688:	e6ef2073 	uxtb	r2, r3
 68c:	e51b3010 	ldr	r3, [r11, #-16]
 690:	e6ef3073 	uxtb	r3, r3
 694:	e1a00002 	mov	r0, r2
 698:	e1a01003 	mov	r1, r3
 69c:	ebfffefc 	bl	294 <HEX_write_ASM>
				
        // HEX4 and HEX5 are flooded by default
		HEX_flood_ASM(HEX4 | HEX5);
 6a0:	e3a00030 	mov	r0, #48	; 0x30
 6a4:	ebfffef3 	bl	278 <HEX_flood_ASM>
		//HEX_clear_ASM(HEX0 | HEX1);
		
		//continue;
		    
		//else {HEX_flood_ASM(HEX1);}
	}
 6a8:	eaffffe7 	b	64c <main+0xc>

000006ac <atexit>:
 6ac:	e1a01000 	mov	r1, r0
 6b0:	e3a00000 	mov	r0, #0
 6b4:	e92d4008 	push	{r3, lr}
 6b8:	e1a02000 	mov	r2, r0
 6bc:	e1a03000 	mov	r3, r0
 6c0:	eb00000e 	bl	700 <__register_exitproc>
 6c4:	e8bd4008 	pop	{r3, lr}
 6c8:	e12fff1e 	bx	lr

000006cc <exit>:
 6cc:	e92d4008 	push	{r3, lr}
 6d0:	e3a01000 	mov	r1, #0
 6d4:	e1a04000 	mov	r4, r0
 6d8:	eb000045 	bl	7f4 <__call_exitprocs>
 6dc:	e59f3018 	ldr	r3, [pc, #24]	; 6fc <exit+0x30>
 6e0:	e5930000 	ldr	r0, [r3]
 6e4:	e590303c 	ldr	r3, [r0, #60]	; 0x3c
 6e8:	e3530000 	cmp	r3, #0
 6ec:	11a0e00f 	movne	lr, pc
 6f0:	112fff13 	bxne	r3
 6f4:	e1a00004 	mov	r0, r4
 6f8:	eb0000c9 	bl	a24 <_exit>
 6fc:	00000ae4 	.word	0x00000ae4

00000700 <__register_exitproc>:
 700:	e59fc0e4 	ldr	r12, [pc, #228]	; 7ec <__register_exitproc+0xec>
 704:	e92d41f0 	push	{r4, r5, r6, r7, r8, lr}
 708:	e59c4000 	ldr	r4, [r12]
 70c:	e594c148 	ldr	r12, [r4, #328]	; 0x148
 710:	e35c0000 	cmp	r12, #0
 714:	0284cf53 	addeq	r12, r4, #332	; 0x14c
 718:	e59c5004 	ldr	r5, [r12, #4]
 71c:	0584c148 	streq	r12, [r4, #328]	; 0x148
 720:	e355001f 	cmp	r5, #31
 724:	e24dd010 	sub	sp, sp, #16
 728:	e1a06000 	mov	r6, r0
 72c:	da000015 	ble	788 <__register_exitproc+0x88>
 730:	e59f00b8 	ldr	r0, [pc, #184]	; 7f0 <__register_exitproc+0xf0>
 734:	e3500000 	cmp	r0, #0
 738:	1a000001 	bne	744 <__register_exitproc+0x44>
 73c:	e3e00000 	mvn	r0, #0
 740:	ea000018 	b	7a8 <__register_exitproc+0xa8>
 744:	e3a00e19 	mov	r0, #400	; 0x190
 748:	e58d100c 	str	r1, [sp, #12]
 74c:	e58d2008 	str	r2, [sp, #8]
 750:	e58d3004 	str	r3, [sp, #4]
 754:	e320f000 	nop	{0}
 758:	e250c000 	subs	r12, r0, #0
 75c:	e59d100c 	ldr	r1, [sp, #12]
 760:	e59d2008 	ldr	r2, [sp, #8]
 764:	e59d3004 	ldr	r3, [sp, #4]
 768:	0afffff3 	beq	73c <__register_exitproc+0x3c>
 76c:	e5945148 	ldr	r5, [r4, #328]	; 0x148
 770:	e3a00000 	mov	r0, #0
 774:	e58c0004 	str	r0, [r12, #4]
 778:	e58c5000 	str	r5, [r12]
 77c:	e584c148 	str	r12, [r4, #328]	; 0x148
 780:	e58c0188 	str	r0, [r12, #392]	; 0x188
 784:	e58c018c 	str	r0, [r12, #396]	; 0x18c
 788:	e3560000 	cmp	r6, #0
 78c:	e59c4004 	ldr	r4, [r12, #4]
 790:	1a000007 	bne	7b4 <__register_exitproc+0xb4>
 794:	e2843002 	add	r3, r4, #2
 798:	e2844001 	add	r4, r4, #1
 79c:	e78c1103 	str	r1, [r12, r3, lsl #2]
 7a0:	e58c4004 	str	r4, [r12, #4]
 7a4:	e3a00000 	mov	r0, #0
 7a8:	e28dd010 	add	sp, sp, #16
 7ac:	e8bd41f0 	pop	{r4, r5, r6, r7, r8, lr}
 7b0:	e12fff1e 	bx	lr
 7b4:	e3a00001 	mov	r0, #1
 7b8:	e1a00410 	lsl	r0, r0, r4
 7bc:	e08c8104 	add	r8, r12, r4, lsl #2
 7c0:	e3560002 	cmp	r6, #2
 7c4:	e59c7188 	ldr	r7, [r12, #392]	; 0x188
 7c8:	e5883108 	str	r3, [r8, #264]	; 0x108
 7cc:	059c318c 	ldreq	r3, [r12, #396]	; 0x18c
 7d0:	e1877000 	orr	r7, r7, r0
 7d4:	01830000 	orreq	r0, r3, r0
 7d8:	e1a05008 	mov	r5, r8
 7dc:	e5882088 	str	r2, [r8, #136]	; 0x88
 7e0:	e58c7188 	str	r7, [r12, #392]	; 0x188
 7e4:	058c018c 	streq	r0, [r12, #396]	; 0x18c
 7e8:	eaffffe9 	b	794 <__register_exitproc+0x94>
 7ec:	00000ae4 	.word	0x00000ae4
 7f0:	00000000 	.word	0x00000000

000007f4 <__call_exitprocs>:
 7f4:	e92d4ff0 	push	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 7f8:	e59f3168 	ldr	r3, [pc, #360]	; 968 <__call_exitprocs+0x174>
 7fc:	e5933000 	ldr	r3, [r3]
 800:	e24dd014 	sub	sp, sp, #20
 804:	e58d3004 	str	r3, [sp, #4]
 808:	e2833f52 	add	r3, r3, #328	; 0x148
 80c:	e58d0008 	str	r0, [sp, #8]
 810:	e58d300c 	str	r3, [sp, #12]
 814:	e1a07001 	mov	r7, r1
 818:	e3a08001 	mov	r8, #1
 81c:	e59d3004 	ldr	r3, [sp, #4]
 820:	e5936148 	ldr	r6, [r3, #328]	; 0x148
 824:	e3560000 	cmp	r6, #0
 828:	e59db00c 	ldr	r11, [sp, #12]
 82c:	0a000033 	beq	900 <__call_exitprocs+0x10c>
 830:	e5965004 	ldr	r5, [r6, #4]
 834:	e2554001 	subs	r4, r5, #1
 838:	5286a088 	addpl	r10, r6, #136	; 0x88
 83c:	5285501f 	addpl	r5, r5, #31
 840:	508a5105 	addpl	r5, r10, r5, lsl #2
 844:	5a000007 	bpl	868 <__call_exitprocs+0x74>
 848:	ea000029 	b	8f4 <__call_exitprocs+0x100>
 84c:	e5953000 	ldr	r3, [r5]
 850:	e1530007 	cmp	r3, r7
 854:	0a000005 	beq	870 <__call_exitprocs+0x7c>
 858:	e2444001 	sub	r4, r4, #1
 85c:	e3740001 	cmn	r4, #1
 860:	e2455004 	sub	r5, r5, #4
 864:	0a000022 	beq	8f4 <__call_exitprocs+0x100>
 868:	e3570000 	cmp	r7, #0
 86c:	1afffff6 	bne	84c <__call_exitprocs+0x58>
 870:	e5963004 	ldr	r3, [r6, #4]
 874:	e06a2005 	rsb	r2, r10, r5
 878:	e2433001 	sub	r3, r3, #1
 87c:	e0862002 	add	r2, r6, r2
 880:	e1530004 	cmp	r3, r4
 884:	e5123078 	ldr	r3, [r2, #-120]	; 0xffffff88
 888:	13a01000 	movne	r1, #0
 88c:	05864004 	streq	r4, [r6, #4]
 890:	15021078 	strne	r1, [r2, #-120]	; 0xffffff88
 894:	e3530000 	cmp	r3, #0
 898:	0affffee 	beq	858 <__call_exitprocs+0x64>
 89c:	e1a02418 	lsl	r2, r8, r4
 8a0:	e5961188 	ldr	r1, [r6, #392]	; 0x188
 8a4:	e1120001 	tst	r2, r1
 8a8:	e5969004 	ldr	r9, [r6, #4]
 8ac:	0a000016 	beq	90c <__call_exitprocs+0x118>
 8b0:	e596118c 	ldr	r1, [r6, #396]	; 0x18c
 8b4:	e1120001 	tst	r2, r1
 8b8:	1a000016 	bne	918 <__call_exitprocs+0x124>
 8bc:	e59d0008 	ldr	r0, [sp, #8]
 8c0:	e5151080 	ldr	r1, [r5, #-128]	; 0xffffff80
 8c4:	e1a0e00f 	mov	lr, pc
 8c8:	e12fff13 	bx	r3
 8cc:	e5963004 	ldr	r3, [r6, #4]
 8d0:	e1530009 	cmp	r3, r9
 8d4:	1affffd0 	bne	81c <__call_exitprocs+0x28>
 8d8:	e59b3000 	ldr	r3, [r11]
 8dc:	e1530006 	cmp	r3, r6
 8e0:	1affffcd 	bne	81c <__call_exitprocs+0x28>
 8e4:	e2444001 	sub	r4, r4, #1
 8e8:	e3740001 	cmn	r4, #1
 8ec:	e2455004 	sub	r5, r5, #4
 8f0:	1affffdc 	bne	868 <__call_exitprocs+0x74>
 8f4:	e59f1070 	ldr	r1, [pc, #112]	; 96c <__call_exitprocs+0x178>
 8f8:	e3510000 	cmp	r1, #0
 8fc:	1a000009 	bne	928 <__call_exitprocs+0x134>
 900:	e28dd014 	add	sp, sp, #20
 904:	e8bd4ff0 	pop	{r4, r5, r6, r7, r8, r9, r10, r11, lr}
 908:	e12fff1e 	bx	lr
 90c:	e1a0e00f 	mov	lr, pc
 910:	e12fff13 	bx	r3
 914:	eaffffec 	b	8cc <__call_exitprocs+0xd8>
 918:	e5150080 	ldr	r0, [r5, #-128]	; 0xffffff80
 91c:	e1a0e00f 	mov	lr, pc
 920:	e12fff13 	bx	r3
 924:	eaffffe8 	b	8cc <__call_exitprocs+0xd8>
 928:	e5963004 	ldr	r3, [r6, #4]
 92c:	e3530000 	cmp	r3, #0
 930:	e5963000 	ldr	r3, [r6]
 934:	1a000008 	bne	95c <__call_exitprocs+0x168>
 938:	e3530000 	cmp	r3, #0
 93c:	0a000006 	beq	95c <__call_exitprocs+0x168>
 940:	e1a00006 	mov	r0, r6
 944:	e58b3000 	str	r3, [r11]
 948:	e320f000 	nop	{0}
 94c:	e59b6000 	ldr	r6, [r11]
 950:	e3560000 	cmp	r6, #0
 954:	1affffb5 	bne	830 <__call_exitprocs+0x3c>
 958:	eaffffe8 	b	900 <__call_exitprocs+0x10c>
 95c:	e1a0b006 	mov	r11, r6
 960:	e1a06003 	mov	r6, r3
 964:	eafffff9 	b	950 <__call_exitprocs+0x15c>
 968:	00000ae4 	.word	0x00000ae4
 96c:	00000000 	.word	0x00000000

00000970 <register_fini>:
 970:	e92d4008 	push	{r3, lr}
 974:	e59f3010 	ldr	r3, [pc, #16]	; 98c <register_fini+0x1c>
 978:	e3530000 	cmp	r3, #0
 97c:	159f000c 	ldrne	r0, [pc, #12]	; 990 <register_fini+0x20>
 980:	1bffff49 	blne	6ac <atexit>
 984:	e8bd4008 	pop	{r3, lr}
 988:	e12fff1e 	bx	lr
 98c:	00000b0c 	.word	0x00000b0c
 990:	00000994 	.word	0x00000994

00000994 <__libc_fini_array>:
 994:	e92d4038 	push	{r3, r4, r5, lr}
 998:	e59f5030 	ldr	r5, [pc, #48]	; 9d0 <__libc_fini_array+0x3c>
 99c:	e59f4030 	ldr	r4, [pc, #48]	; 9d4 <__libc_fini_array+0x40>
 9a0:	e0654004 	rsb	r4, r5, r4
 9a4:	e1b04144 	asrs	r4, r4, #2
 9a8:	10855104 	addne	r5, r5, r4, lsl #2
 9ac:	0a000004 	beq	9c4 <__libc_fini_array+0x30>
 9b0:	e5353004 	ldr	r3, [r5, #-4]!
 9b4:	e1a0e00f 	mov	lr, pc
 9b8:	e12fff13 	bx	r3
 9bc:	e2544001 	subs	r4, r4, #1
 9c0:	1afffffa 	bne	9b0 <__libc_fini_array+0x1c>
 9c4:	eb000050 	bl	b0c <__libc_fini>
 9c8:	e8bd4038 	pop	{r3, r4, r5, lr}
 9cc:	e12fff1e 	bx	lr
 9d0:	00000b24 	.word	0x00000b24
 9d4:	00000b28 	.word	0x00000b28

000009d8 <__cs3_premain>:
 9d8:	e92d4008 	push	{r3, lr}
 9dc:	eb00001d 	bl	a58 <__libc_init_array>
 9e0:	e59f3030 	ldr	r3, [pc, #48]	; a18 <__cs3_premain+0x40>
 9e4:	e3530000 	cmp	r3, #0
 9e8:	15930000 	ldrne	r0, [r3]
 9ec:	01a00003 	moveq	r0, r3
 9f0:	e59f3024 	ldr	r3, [pc, #36]	; a1c <__cs3_premain+0x44>
 9f4:	e3530000 	cmp	r3, #0
 9f8:	15931000 	ldrne	r1, [r3]
 9fc:	01a01003 	moveq	r1, r3
 a00:	e3a02000 	mov	r2, #0
 a04:	ebffff0d 	bl	640 <main>
 a08:	e59f3010 	ldr	r3, [pc, #16]	; a20 <__cs3_premain+0x48>
 a0c:	e3530000 	cmp	r3, #0
 a10:	1bffff2d 	blne	6cc <exit>
 a14:	eafffffe 	b	a14 <__cs3_premain+0x3c>
	...
 a20:	000006cc 	.word	0x000006cc

00000a24 <_exit>:
 a24:	e52de004 	push	{lr}		; (str lr, [sp, #-4]!)
 a28:	e3a00018 	mov	r0, #24
 a2c:	e59f1004 	ldr	r1, [pc, #4]	; a38 <_exit+0x14>
 a30:	ef123456 	svc	0x00123456
 a34:	eafffffe 	b	a34 <_exit+0x10>
 a38:	00020026 	.word	0x00020026

00000a3c <__cs3_isr_interrupt>:
 a3c:	eafffffe 	b	a3c <__cs3_isr_interrupt>

00000a40 <__cs3_isr_undef>:
 a40:	eafffffe 	b	a40 <__cs3_isr_undef>

00000a44 <__cs3_isr_swi>:
 a44:	eafffffe 	b	a44 <__cs3_isr_swi>

00000a48 <__cs3_isr_pabort>:
 a48:	eafffffe 	b	a48 <__cs3_isr_pabort>

00000a4c <__cs3_isr_dabort>:
 a4c:	eafffffe 	b	a4c <__cs3_isr_dabort>

00000a50 <__cs3_isr_irq>:
 a50:	eafffffe 	b	a50 <__cs3_isr_irq>

00000a54 <__cs3_isr_fiq>:
 a54:	eafffffe 	b	a54 <__cs3_isr_fiq>

00000a58 <__libc_init_array>:
 a58:	e92d4070 	push	{r4, r5, r6, lr}
 a5c:	e59f506c 	ldr	r5, [pc, #108]	; ad0 <__libc_init_array+0x78>
 a60:	e59f606c 	ldr	r6, [pc, #108]	; ad4 <__libc_init_array+0x7c>
 a64:	e0656006 	rsb	r6, r5, r6
 a68:	e1b06146 	asrs	r6, r6, #2
 a6c:	12455004 	subne	r5, r5, #4
 a70:	13a04000 	movne	r4, #0
 a74:	0a000005 	beq	a90 <__libc_init_array+0x38>
 a78:	e5b53004 	ldr	r3, [r5, #4]!
 a7c:	e2844001 	add	r4, r4, #1
 a80:	e1a0e00f 	mov	lr, pc
 a84:	e12fff13 	bx	r3
 a88:	e1560004 	cmp	r6, r4
 a8c:	1afffff9 	bne	a78 <__libc_init_array+0x20>
 a90:	e59f5040 	ldr	r5, [pc, #64]	; ad8 <__libc_init_array+0x80>
 a94:	e59f6040 	ldr	r6, [pc, #64]	; adc <__libc_init_array+0x84>
 a98:	e0656006 	rsb	r6, r5, r6
 a9c:	eb000012 	bl	aec <_init>
 aa0:	e1b06146 	asrs	r6, r6, #2
 aa4:	12455004 	subne	r5, r5, #4
 aa8:	13a04000 	movne	r4, #0
 aac:	0a000005 	beq	ac8 <__libc_init_array+0x70>
 ab0:	e5b53004 	ldr	r3, [r5, #4]!
 ab4:	e2844001 	add	r4, r4, #1
 ab8:	e1a0e00f 	mov	lr, pc
 abc:	e12fff13 	bx	r3
 ac0:	e1560004 	cmp	r6, r4
 ac4:	1afffff9 	bne	ab0 <__libc_init_array+0x58>
 ac8:	e8bd4070 	pop	{r4, r5, r6, lr}
 acc:	e12fff1e 	bx	lr
 ad0:	00000b04 	.word	0x00000b04
 ad4:	00000b04 	.word	0x00000b04
 ad8:	00000b04 	.word	0x00000b04
 adc:	00000b0c 	.word	0x00000b0c

Disassembly of section .rodata:

00000ae4 <_global_impure_ptr>:
 ae4:	00000b50 00000043                       P...C...

00000aec <_init>:
 aec:	e1a0c00d 	mov	r12, sp
 af0:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 af4:	e24cb004 	sub	r11, r12, #4
 af8:	e24bd028 	sub	sp, r11, #40	; 0x28
 afc:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 b00:	e12fff1e 	bx	lr

00000b04 <__init_array_start>:
 b04:	00000970 	.word	0x00000970

00000b08 <__frame_dummy_init_array_entry>:
 b08:	00000208                                ....

00000b0c <__libc_fini>:
 b0c:	e1a0c00d 	mov	r12, sp
 b10:	e92ddff8 	push	{r3, r4, r5, r6, r7, r8, r9, r10, r11, r12, lr, pc}
 b14:	e24cb004 	sub	r11, r12, #4
 b18:	e24bd028 	sub	sp, r11, #40	; 0x28
 b1c:	e89d6ff0 	ldm	sp, {r4, r5, r6, r7, r8, r9, r10, r11, sp, lr}
 b20:	e12fff1e 	bx	lr

00000b24 <__fini_array_start>:
 b24:	000001c4 	.word	0x000001c4

00000b28 <__cs3_regions>:
 b28:	00000000 	.word	0x00000000
 b2c:	00000040 	.word	0x00000040
 b30:	00000040 	.word	0x00000040
 b34:	00000f40 	.word	0x00000f40
 b38:	00000020 	.word	0x00000020

00000b3c <__cs3_regions_end>:
 b3c:	00000000 	.word	0x00000000
